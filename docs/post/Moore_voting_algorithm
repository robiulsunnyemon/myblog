
## ЁЯза Moore's Voting Algorithm ржХрзА?

ржзрж░рж┐, ржПржХржЯрж╛ array ржЖржЫрзЗред **Majority element** ржмрж▓рждрзЗ ржмрзБржЭрж╛рзЯ ржПржоржи ржПржХржЯрж╛ рж╕ржВржЦрзНржпрж╛, ржпрзЗржЯрж╛ array-рждрзЗ **n/2 ржПрж░ ржмрзЗрж╢рж┐ ржмрж╛рж░** ржПрж╕рзЗржЫрзЗ (ржорж╛ржирзЗ total element ржПрж░ ржЕрж░рзНржзрзЗржХрзЗрж░ ржЪрзЗрзЯрзЗржУ ржмрзЗрж╢рж┐ ржмрж╛рж░)ред

ЁЯУМ MooreтАЩs Voting Algorithm ржмрж▓рзЗ тАФ

> ржпржжрж┐ ржПржоржи ржПржХржЯрж╛ majority element ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ **ржПржХржмрж╛рж░рзЗржЗ ржкрзБрж░рзЛ array ржШрзБрж░рзЗ** ржЖржорж░рж╛ рж╕рзЗржЯрж╛ ржмрзЗрж░ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред
> тП▒я╕П Time: O(n), ЁЯза Space: O(1)

---

## тЬЕ Algorithm ржПрж░ Step-by-Step ржзрж░ржи:

1. ржзрж░рзЛ ржкрзНрж░ржержо element ржЯрж╛ржХрзЗржЗ candidate рж╣рж┐рж╕рзЗржмрзЗ ржзрж░рзЛред
2. ржПржХржЯрж╛ `count = 1` ржзрж░рзЛред
3. ржкрж░рзЗрж░ element ржЧрзБрж▓рзЛ check ржХрж░рзЛ:

   * ржпржжрж┐ candidate ржПрж░ рж╕ржорж╛ржи рж╣рзЯ тЖТ `count++`
   * ржпржжрж┐ ржирж╛ рж╣рзЯ тЖТ `count--`
   * ржпржжрж┐ `count` 0 рж╣рзЯрзЗ ржпрж╛рзЯ тЖТ ржирждрзБржи candidate ржзрж░рзЛ
4. рж╢рзЗрж╖рзЗ ржпрзЗржЗ candidate ржерж╛ржХржмрзЗ, рж╕рзЗржЯрж╛ржЗ рж╕ржорзНржнрж╛ржмрзНржп majorityред

> ржХрж┐ржирзНрждрзБ ржоржирзЗ рж░рзЗржЦрзЛ, algorithm рж╢рзЗрж╖рзЗ verify ржХрж░рж╛ржУ ржжрж░ржХрж╛рж░ (check ржХрж░рждрзЗ рж╣ржмрзЗ candidate рж╕рждрзНржпрж┐ржЗ majority ржХрж┐ржирж╛)ред

---

## ЁЯФН ржЙржжрж╛рж╣рж░ржг ржжрж┐рзЯрзЗ ржмрзЛржЭрж╛ржирзЛ ржпрж╛ржХ:

### Input:

`arr = [2, 2, 1, 1, 1, 2, 2]`

### Step-by-step Execution:

| Step | Element | Candidate | Count | Explanation                       |
| ---- | ------- | --------- | ----- | --------------------------------- |
| 1    | 2       | 2         | 1     | рж╢рзБрж░рзБрждрзЗ 2 ржХрзЗ ржзрж░рж▓рж╛ржо                 |
| 2    | 2       | 2         | 2     | same тЖТ count ржмрж╛рзЬрж╛рж▓рж╛ржо              |
| 3    | 1       | 2         | 1     | ржнрж┐ржирзНржи тЖТ count ржХржорж╛рж▓рж╛ржо              |
| 4    | 1       | 2         | 0     | ржЖржмрж╛рж░ ржнрж┐ржирзНржи тЖТ count 0 тЖТ ржирждрзБржи ржзрж░ржмрзЛ  |
| 5    | 1       | 1         | 1     | ржирждрзБржи candidate = 1                |
| 6    | 2       | 1         | 0     | again ржнрж┐ржирзНржи тЖТ count 0 тЖТ ржирждрзБржи ржзрж░ржмрзЛ |
| 7    | 2       | 2         | 1     | ржирждрзБржи candidate = 2                |

ЁЯФЪ рж╢рзЗрж╖рзЗ candidate = **2**

---

## ЁЯФБ Verify ржХрж░рж┐:

Count 2 ржПрж░ ржЬржирзНржп:

`[2, 2, _, _, _, 2, 2]` тЖТ 4 ржмрж╛рж░ \nArray size = 7 тЖТ `7/2 = 3.5` тЖТ majority ржПрж░ ржЬржирзНржп ржжрж░ржХрж╛рж░ >3.5 = 4 \nSo тЬЕ 2 is majority.

---

## тЬЕ C++ Code (Simple):

```cpp
int majorityElement(vector<int>& nums) {
    int count = 0, candidate = 0;

    for (int num : nums) {
        if (count == 0)
            candidate = num;
        count += (num == candidate) ? 1 : -1;
    }

    // Optional: verify candidate is truly majority
    int verify = 0;
    for (int num : nums)
        if (num == candidate) verify++;

    return (verify > nums.size()/2) ? candidate : -1; // return -1 if no majority
}
```

---

## ЁЯФС ржоржирзЗ рж░рж╛ржЦрж╛рж░ Trick :

* count 0 рж╣рж▓рзЗ тАФ "ржкрзБрж░рж╛ржи ржкрзНрж░рзЗржо ржнрзБрж▓рзЗ ржирждрзБржи candidate ржзрж░рзЛ"
* ржПржХржЗ рж╣рж▓рзЗ тАФ "count ржмрж╛рзЬрж╛ржУ"
* ржнрж┐ржирзНржи рж╣рж▓рзЗ тАФ "count ржХржорж╛ржУ"

